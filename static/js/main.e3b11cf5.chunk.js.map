{"version":3,"sources":["authRoutes.ts","protectedRoutes.ts","components/commons/CustomLoader.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Register","lazy","route","path","exact","name","component","routes","CustomLoader","className","type","color","width","height","App","authRoutes","map","index","key","protectedRoutes","pRoutes","fallback","concat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTAEMA,EAAWC,gBAAK,kBAAM,uDAUbC,EAND,CACV,CAAEC,KAAM,IAAKC,OAAO,EAAMC,KAAM,WAAYC,UAAWN,GACvD,CAAEG,KAAM,eAAgBC,OAAO,EAAMC,KAAM,WAAYC,UAAWN,GAClE,CAAEG,KAAM,eAAgBC,OAAO,EAAMC,KAAM,QAASC,UAN1CL,gBAAK,kBAAM,yDCOVM,EALA,CACX,CAAEJ,KAAM,WAAYC,OAAO,EAAMC,KAAM,WAAYC,UALtCL,gBAAK,kBAAM,+DAMxB,CAAEE,KAAM,WAAYC,OAAO,EAAMC,KAAM,UAAWC,UALtCL,gBAAK,kBAAM,gE,iBCYZO,G,MARgB,WAC3B,OACI,yBAAKC,UAAU,oBACX,kBAAC,IAAD,CAAQC,KAAM,QAASC,MAAO,UAAWC,MAAO,IAAKC,OAAQ,SCiC1DC,EAlCO,WAClB,IAAMC,EAAaR,EAAOS,KAAI,SAACd,EAAOe,GAClC,OAAQf,EAAMI,UACV,kBAAC,IAAD,CACIY,IAAKD,EACLd,KAAMD,EAAMC,KACZC,MAAOF,EAAME,MACbE,UAAWJ,EAAMI,YACpB,QAEHa,EAAkBC,EAAQJ,KAAI,SAACd,EAAOe,GACxC,OAAQf,EAAMI,UACV,kBAAC,IAAD,CACIY,IAAKD,EACLd,KAAMD,EAAMC,KACZC,MAAOF,EAAME,MACbE,UAAWJ,EAAMI,YACpB,QAGX,OACI,kBAAC,IAAD,KACI,6BACI,kBAAC,WAAD,CAAUe,SAAU,kBAAC,EAAD,OAChB,kBAAC,IAAD,KACKN,EAAWO,OAAOH,QCrBrBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e3b11cf5.chunk.js","sourcesContent":["import {lazy} from 'react';\n\nconst Register = lazy(() => import('./containers/auth/Register'));\nconst Login = lazy(() => import('./containers/auth/Login'));\n\n\nconst route = [\n    { path: '/', exact: true, name: 'Register', component: Register },\n    { path: '/auth/signup', exact: true, name: 'Register', component: Register },\n    { path: '/auth/signin', exact: true, name: 'Login', component: Login }\n];\n\nexport default route;\n","import {lazy} from 'react';\nconst Products = lazy(() => import('./containers/products/Products'));\nconst Profile = lazy(() => import('./containers/profile/Profile'));\n\n\nconst routes = [\n    { path: '/product', exact: true, name: 'Products', component: Products },\n    { path: '/profile', exact: true, name: 'Profile', component: Profile },\n];\n\nexport default routes;\n","import React from 'react';\nimport Loader from 'react-loader-spinner';\n\nimport './styles/LoaderStyles.scss';\n\n\nconst CustomLoader: React.FC = () => {\n    return (\n        <div className=\"loader-container\">\n            <Loader type={'Plane'} color={'#3f51b5'} width={100} height={100} />\n        </div>\n    );\n}\n\nexport default CustomLoader;\n","import React, { Suspense} from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport routes from './authRoutes'\nimport pRoutes from './protectedRoutes'\nimport CustomLoader from './components/commons/CustomLoader';\n\n\nconst App: React.FC = () => {\n    const authRoutes = routes.map((route, index) => {\n        return (route.component) ? (\n            <Route\n                key={index}\n                path={route.path}\n                exact={route.exact}\n                component={route.component} />\n        ) : (null);\n    });\n    const protectedRoutes = pRoutes.map((route, index) => {\n        return (route.component) ? (\n            <Route\n                key={index}\n                path={route.path}\n                exact={route.exact}\n                component={route.component} />\n        ) : (null);\n    });\n\n  return (\n      <BrowserRouter>\n          <div>\n              <Suspense fallback={<CustomLoader/>}>\n                  <Switch>\n                      {authRoutes.concat(protectedRoutes)}\n                  </Switch>\n              </Suspense>\n          </div>\n\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}